/**
	Box2d basics, uses debugdraw
	Silver Moon
	m00n.silv3r@gmail.com
*/

//Global classnames from Box2d namespace
var b2Vec2 = Box2D.Common.Math.b2Vec2
	, b2AABB = Box2D.Collision.b2AABB
	, b2BodyDef = Box2D.Dynamics.b2BodyDef
	, b2Body = Box2D.Dynamics.b2Body
	, b2FixtureDef = Box2D.Dynamics.b2FixtureDef
	, b2Fixture = Box2D.Dynamics.b2Fixture
	, b2World = Box2D.Dynamics.b2World
	, b2MassData = Box2D.Collision.Shapes.b2MassData
	, b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape
	, b2CircleShape = Box2D.Collision.Shapes.b2CircleShape
	, b2DebugDraw = Box2D.Dynamics.b2DebugDraw
	, b2Shape = Box2D.Collision.Shapes.b2Shape
	, b2Settings = Box2D.Common.b2Settings
	;

var world;
var ctx;
var canvas_width;
var canvas_height;

//box2d to canvas scale , therefor 1 metre of box2d = 75px of canvas :)
var scale = 75;

/*
	Draw a world
	this method is called in a loop to redraw the world
*/	 
function draw_world(world, context) 
{
	//convert the canvas coordinate directions to cartesian
	ctx.save();
	ctx.translate(0 , canvas_height);
	ctx.scale(1 , -1);
	world.DrawDebugData();
	ctx.restore();
	
	ctx.font = 'bold 18px arial';
	ctx.textAlign = 'center';
	ctx.fillStyle = '#ffffff';
	ctx.fillText("Box2d Hello World Example", canvas_width/2, 20);
	ctx.font = 'bold 14px arial';
	ctx.fillText("Click the screen to add more objects", canvas_width/2, 40);
}

//Create box2d world object
function createWorld() 
{
	//Gravity vector x, y - 10 m/s2 - thats earth!!
	var gravity = new b2Vec2(0, -10);
	
	world = new b2World(gravity , true );
		
	//setup debug draw
	var debugDraw = new b2DebugDraw();
	debugDraw.SetSprite(document.getElementById("canvas").getContext("2d"));
	debugDraw.SetDrawScale(scale);
	debugDraw.SetFillAlpha(0.5);
	debugDraw.SetLineThickness(1.0);
	debugDraw.SetFlags(b2DebugDraw.e_shapeBit | b2DebugDraw.e_jointBit);
	
	world.SetDebugDraw(debugDraw);
	
	ground = createBox(world, 4.25, 1, 4 , 0.25, {type : b2Body.b2_staticBody});
	
	return world;
}		

//Create a ground below the hellow world boxes
function createGround(world) 
{
	var bodyDef = new b2BodyDef();
	
	var fixDef = new b2FixtureDef();
	fixDef.density = 1.0;
	fixDef.friction = 1.0;
	fixDef.restitution = 0.5;
	
	fixDef.shape = new b2PolygonShape;
	
	//mention half the sizes
	fixDef.shape.SetAsBox(4.00 , .5);
	
	//set the position of the center
	bodyDef.position.Set(4.10 , 1);
	
	return world.CreateBody(bodyDef).CreateFixture(fixDef);
}

//Function to create a ball
function createBall(world, x, y, r, options) 
{
	var body_def = new b2BodyDef();
	var fix_def = new b2FixtureDef;
	
	fix_def.density = 1.0;
	fix_def.friction = 0.5;
	fix_def.restitution = 0.5;
	
	var shape = new b2CircleShape(r);
	fix_def.shape = shape;
	
	body_def.position.Set(x , y);
	
	body_def.linearDamping = 0.0;
	body_def.angularDamping = 0.0;
	
	body_def.type = b2Body.b2_dynamicBody;
	body_def.userData = options.user_data;
	
	var b = world.CreateBody( body_def );
	b.CreateFixture(fix_def);
	
	return b;
}

//Create some elements
function createHelloWorld() 
{
	// H
	createBox(world, .5 , 2.2, .1, .2);
	
	createBox(world, .9 , 2.2 , .1, .2);
	createBox(world, .7 , 1.95 , .3, .05);
	createBox(world, .5 , 1.7 , .1 , .2);
	createBox(world, .9 , 1.7 , .1 , .2);
}

//Create standard boxes of given height , width at x,y
function createBox(world, x, y, width, height, options) 
{
	 //default setting
	options = $.extend(true, {
		'density' : 1.0 ,
		'friction' : 1.0 ,
		'restitution' : 0.5 ,
		
		'linearDamping' : 0.0 ,
		'angularDamping' : 0.0 ,
		
		'type' : b2Body.b2_dynamicBody
	}, options);
      
    var body_def = new b2BodyDef();
	var fix_def = new b2FixtureDef();
	
	fix_def.density = options.density;
	fix_def.friction = options.friction;
	fix_def.restitution = options.restitution;
	
	fix_def.shape = new b2PolygonShape();
		
	fix_def.shape.SetAsBox( width , height );
	
	body_def.position.Set(x , y);
	
	body_def.linearDamping = options.linearDamping;
	body_def.angularDamping = options.angularDamping;
	
	body_def.type = options.type;
	body_def.userData = options.user_data;
	
	var b = world.CreateBody( body_def );
	var f = b.CreateFixture(fix_def);
	
	return b;
}

/*
	This method will draw the world again and again
	called by settimeout , self looped
*/
function step() 
{
	var fps = 60;
	var timeStep = 1.0/fps;
	
	//move the world ahead , step ahead man!!
	world.Step(timeStep , 8 , 3);
	world.ClearForces();
	
	draw_world(world, ctx);
}

//Convert coordinates in canvas to box2d world
function get_real(p)
{
	return new b2Vec2(p.x + 0, canvas_height_m - p.y);
}

//setup things once dom is ready
$(function() 
{
	var canvas = $('#canvas');
	ctx = canvas.get(0).getContext('2d');
	
	//first create the world
	world = createWorld();
	
	//get internal dimensions of the canvas
	canvas_width = parseInt(canvas.attr('width'));
	canvas_height = parseInt(canvas.attr('height'));
	canvas_height_m = canvas_height/scale;
	
	//create the hello world boxes in the world
	createHelloWorld();
	
	//click event handler on our world
	canvas.click( function(e) 
	{
		//convert mouse coordinates from pixel to metre in box2d world
		var p = get_real(new b2Vec2(e.clientX / scale, e.clientY / scale));
		
		//create shape
		if (Math.random() > 0.5) 
		{
			//Square box
			createBox(world, p.x , p.y , .1 , .1);
		} 
		else 
		{
			//circle
			createBall(world, p.x , p.y, 0.2, {'user_data' : {'fill_color' : 'rgba(204,100,0,0.3)' , 'border_color' : '#555' }});
		}
	});
	
	 window.setInterval(step, 1000 / 60);
});